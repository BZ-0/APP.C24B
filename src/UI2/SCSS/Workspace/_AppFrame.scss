@use "@unite/scss/core/Profile" as ps;
@use "@unite/scss/core/Detector" as d;

//
@use "@unite/scss/design/ColorTheme" as tm;

//
// titlebar == titlebar (desktop) | navbar (mobile) | taskbar (mobile)
// status   == 0px      (desktop) | status (mobile)

//
@layer ui-app-frame {

    //
    @mixin maximized {
        & {
            @include ps.stretch;

            //
            inset-inline-start: 0px;
            inset-block-start: 0px;

            //
            --safe-area-left: env(titlebar-area-x, 0px);
            --safe-area-right: calc(100% - env(titlebar-area-width, 100%));
        }

        & {
            --drag-x: 0px;
            --drag-y: 0px;

            //
            --rx: 0px;
            --ry: 0px;

            //
            --translate-x: 0px;
            --translate-y: 0px;
        }
    }

    //
    @mixin fullscreen {
        display: contents;

        //
        & :where(.ui-title-label, .ui-titlebar) {
            display: none;
        }

        //
        & .ui-content {
            z-index: calc(999 + var(--z-index, 0));
        }
    };

    //
    @mixin whenDesktop {
        //
        @include ps.clamped-inline(calc(48rem + var(--resize-x, 0) * var(--zpx, 1px)), min(48rem, 100cqi), calc(100cqi - calc(var(--drag-x, 0) * var(--zpx, 1px))));
        @include ps.clamped-block(calc(32rem + var(--resize-y, 0) * var(--zpx, 1px)), min(32rem, 100cqb), calc(100cqb - calc(var(--drag-y, 0) * var(--zpx, 1px)) - var(--height-adjust, 0px)));

        //
        & {
            border-radius: 0.25rem;
            box-shadow: 0px 0px 1rem 1px #00000070;
        }
    }

    //
    @mixin whenMobile {
        @include maximized;

        //
        & {
            padding-block-end: 0px;
            grid-template-rows:
                [status] minmax(0px, var(--status-size))
                [content-b] minmax(0px, 1fr)
                [titlebar] minmax(0px, var(--titlebar-size));
        }

        //
        & .ui-title-label, .ui-titlebar { display: none; }
    };

    //
    .ui-app-frame {
        @include ps.stretch;
        @include ps.grid-layout(
            // columns
            //[menu-button] minmax(var(--titlebar-size), max-content)
            [safe-area-left] minmax(0px, var(--safe-area-left, 0px))
            [title-label] minmax(0px, 1fr)
            [max-button ] minmax(var(--titlebar-size), max-content)
            [back-button] minmax(var(--titlebar-size), max-content)
            [safe-area-right] minmax(0px, var(--safe-area-right, 0px)),

            // rows
            [titlebar] minmax(0px, var(--titlebar-size))
            [content-b] minmax(0px, 1fr)
            [status] minmax(0px, var(--status-size))
        );

        // //titlebar-area-width
        @at-root html[data-app-titlebar="mac"] & {
            grid-template-columns:
                [safe-area-left] minmax(0px, var(--safe-area-left, 0px))
                [back-button] minmax(var(--titlebar-size), max-content)
                [max-button ] minmax(var(--titlebar-size), max-content)
                [title-label] minmax(0px, 1fr)
                [safe-area-right] minmax(0px, var(--safe-area-right, 0px));
                //[menu-button] minmax(var(--titlebar-size), max-content);
        }

        //
        & {
            //
            --safe-area-left: 0px;
            --safe-area-right: 0px;

            //
            --rx: calc(var(--drag-x, 0) * var(--zpx, 1px));
            --ry: calc(var(--drag-y, 0) * var(--zpx, 1px));

            //
            --translate-x: clamp(0px, var(--rx, 0px), calc(100cqi - var(--border-width, 100%)));
            --translate-y: clamp(0px, var(--ry, 0px), calc(calc(100cqb - var(--height-adjust, 0px)) - var(--border-height, 100%)));
        }

        //
        & {
            direction: ltr;
            pointer-events: auto;
            inset-inline-start: var(--translate-x, 0px);
            inset-block-start: var(--translate-y, 0px);

            //
            outline: solid 1px var(--current-surface-color);
            transition: outline-color 200ms;
            transform: translate3d(0px, 0px, 0px) scale3d(var(--scale, 1), var(--scale, 1), 1) !important;
            translate: 0px 0px 0px !important;

            //
            will-change:
                inset-inline-start,
                inset-block-start,
                inline-size,
                block-size,
                transform,
                contents;

            //
            overflow: hidden;
            position: fixed;

            //
            font-size: 0.9rem;
            z-index: calc(999 + var(--z-index, 0));
            place-self: start;

            //
            contain: content;
            container-type: size;
            container-name: ui-windowed;
        }

        //
        &:has(*:target) { z-index: 1399; }
        & > :where(*) { inline-size: 100%; block-size: 100%; }

        //
        & > :where(.ui-resize) {
            position: absolute;
            inset: auto;
            inset-inline-end: 0px;
            inset-block-end: 0px;
            inline-size: 1rem;
            block-size: 1rem;

            //
            background-color: transparent;
            cursor: nwse-resize;
        }

        //
        & > :where(.ui-titlebar) {
            @include ps.no-wrap;
            @include ps.stretch;
            @include ps.grid-layout(subgrid, minmax(0px, 1fr));

            //
            & {
                direction: ltr;
                pointer-events: auto;
                align-items: end;

                //
                grid-row: titlebar;
                grid-column: 1 / -1;
                gap: 0px;
            }

            //
            & > :where(*) {
                @include ps.stretch;

                //
                pointer-events: none;
                padding: 1rem;
                grid-row: 1 / 1 span;
            }

            //
            & > :where(.back-button, .menu-button, .max-button) {
                @include ps.stretch;

                //
                padding: 0.666rem;
                cursor: pointer;
                pointer-events: auto;
                direction: ltr;

                //
                aspect-ratio: 1 / 1;
                max-inline-size: var(--titlebar-size, 0px);
                max-block-size: var(--titlebar-size, 0px);
            }
        };

        //
        & :where(.ui-titlebar > .ui-title-handle, .ui-title-label) {
            @include ps.no-wrap;
            @include ps.stretch;
            @include ps.flex(row);

            //
            span {
                @include ps.stretch;

                //
                & {
                    display: flex;
                    place-content: center start;
                    place-items: center;
                }
            }

            //
            & {
                grid-row: 1 / 1 span;
                grid-column: title-label;
                pointer-events: none;

                //
                text-align: start;
                place-self: center start;
                place-content: center space-between;
                place-items: center start;

                //
                gap: 0.8rem;
                padding: 0.5rem;
                padding-inline: 0.5rem;
                cursor: move;

                //
                font-weight: 600;
                font-size: 1rem;
            }

            //
            .ui-icon {
                inline-size: max-content;
                block-size: max-content;

                max-inline-size: 1.25rem;
                max-block-size: 1.25rem;
            }

            //
            @at-root html[data-app-titlebar="mac"] & {
                flex-direction: row-reverse;

                //
                span {
                    display: flex;
                    place-content: center;
                    place-items: center;
                }
            }

        };

        //
        & :where(.ui-title-handle) { pointer-events: auto; }
        & :where(.ui-title-label)  { pointer-events: none; }

        //
        & > .ui-status  { grid-row: status;    grid-column: 1 / -1; };
        & > .ui-content { grid-row: content-b; grid-column: 1 / -1; };

        //
        @media #{d.$isMobile} { @include whenMobile; };
        @media #{d.$isDesktop} { @include whenDesktop; };
        &[data-maximized="true"] { @include maximized; };
    };
};
