@use "@unite/scss/core/Profile" as ps;

//
@layer ui-decors {
    .ui-block-decor {
        @include ps.no-wrap;
        @include ps.limited-inline(100%);
        @include ps.clamped-block(var(--decor-size), max-content, none);
        @include ps.grid-layout(
            minmax(var(--decor-size), max-content) minmax(0px, 1fr) minmax(var(--decor-size), max-content),
            minmax(var(--decor-size), max-content)
        );

        //
        & { --decor-size: 2.8rem; };

        //
        & {
            position: relative;
            container-type: normal;
            contain: none;
            pointer-events: none;

            //
            cursor: pointer;
            overflow: visible;

            //
            place-content: center;
            place-items: center;
            justify-content: space-between;
        }

        //
        & > :where(*) {
            @include ps.no-wrap;
            @include ps.stretch;

            //
            & {
                pointer-events: none;
                box-sizing: border-box;
                background-clip: border-box;
                background-origin: content-box;
                background-color: transparent;
                background-image: none;
                padding-inline: calc(var(--decor-size) * 0.3);
                padding-block: calc(var(--decor-size) * 0.3);
                overflow: visible;
                flex-grow: 0;
                flex-basis: auto;
                flex-shrink: 0;
            }
        }

        //
        & > *:where([data-place="label"], :not([data-place])) {
            @include ps.no-wrap;
            @include ps.stretch;

            //
            & {
                padding-inline: calc(var(--decor-size) * 0.2);

                //
                text-align: start;
                justify-self: start;
                justify-content: start;
                justify-items: start;
            }
        }

        //
        & > *[data-place="element"] {
            @include ps.limited-inline(max-content);

            //
            & {
                pointer-events: none;
                aspect-ratio: auto;
                justify-self: end;
            }
        }

        //
        & > *[data-place="icon"] {
            @include ps.limited-inline(var(--decor-size));
            @include ps.limited-block(var(--decor-size));

            //
            & {
                stroke: var(--current-glyph-color);
                color : var(--current-glyph-color);
                aspect-ratio: 1 / 1;
                justify-self: start;
            }
        }

        //
        & > *[data-place="icon"]    { grid-column: 1 / 1 span; grid-row: 1 / 1 span; }
        & > *[data-place="element"] { grid-column: 3 / 3 span; grid-row: 1 / 1 span; }
        & > *:where([data-place="label"], :not([data-place])) {
            grid-column: 2 / 2 span;
            grid-row: 1 / 1 span;
        }

        //
        &.layout-alt {
            //
            @include ps.grid-layout(
                minmax(var(--decor-size), max-content) minmax(0px, 1fr),
                minmax(var(--decor-size), max-content) minmax(var(--decor-size), max-content)
            );

            //
            & {
                overflow: visible;
                block-size: max-content;
            }

            //
            & > *[data-place="icon"]    { grid-column: 1 / 1 span; grid-row: 1 / 1 span; justify-self: start;}
            & > *[data-place="element"] { grid-column: 1 / 2 span; grid-row: 2 / 2 span; justify-self: start; align-self: start; }
            & > *:where([data-place="label"], :not([data-place])) {
                grid-column: 2 / 2 span;
                grid-row: 1 / 1 span;
                justify-self: start;
            }
        }
    };
};
